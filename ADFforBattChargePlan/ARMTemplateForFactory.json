{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFforBattChargePlan"
		},
		"AzFuncJsonStructObjToArray_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzFuncJsonStructObjToArray'"
		},
		"BattChargePlanBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BattChargePlanBlobStorage1'"
		},
		"SqlDbBattChargePlan_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlDbBattChargePlan'"
		},
		"AKV_BattChargePlan_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://BattChargePlanVault.vault.azure.net/"
		},
		"AzFuncJsonStructObjToArray_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://jsonstructobjtoarray.azurewebsites.net"
		},
		"ElSpotPrices_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat(\n'https://api.energidataservice.dk/datastore_search_sql',\n'?sql=SELECT%20*%20from%20%22elspotprices%22%20WHERE%20%22PriceArea%22=''DK1''%20AND%20%22HourUTC%22%3e=''',\nutcNow('yyyy-MM-dd'),\n'''%20AND%20%22HourUTC%22%3c''',\ngetFutureTime(1, 'Day', 'yyyy-MM-dd'),\n'''%20ORDER%20BY%20%22HourUTC%22%20ASC%20LIMIT%2050')}"
		},
		"ForecastSolar_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.forecast.solar/estimate/54.911280/9.764450/22/0/6.7?no_sun=1"
		},
		"RestServiceSonnenBattery_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://my-api.sonnen.de/v1/sites/3f53e2ac-5815-486b-806f-7298991fe356/statistics?filter[start]=2022-06-02T00:00:00+02:00&filter[end]=2022-06-02T23:59:59+02:00&filter[resolution]=1-hour"
		},
		"RestService_jsonStructObjToArray_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://jsonstructobjtoarray.azurewebsites.net/api/ObjectPropsToArray"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/battery-stat-loaddata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "batterystat dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "batterystat dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/batterystat dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/elspotprices-loaddata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "elspotprices dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "elspotprices dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/elspotprices dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/forecast-solar-loaddata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "forecastsolar dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Store JSON output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "forecastsolar dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ObjectPropsToArray",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "WebForecastSolar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ObjectPropsToArray?jpath=result.watts,result.watt_hours,result.watt_hours_day&keyToProp=datetime&valToProp=watt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('WebForecastSolar').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzFuncJsonStructObjToArray",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebForecastSolar",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.forecast.solar/estimate/54.911280/9.764450/22/0/6.7?no_sun=1",
							"method": "GET",
							"headers": {},
							"datasets": [
								{
									"referenceName": "RestResourceForecastSolar",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Store JSON output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ObjectPropsToArray",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "JsonText",
										"value": {
											"value": "@string(activity('ObjectPropsToArray').output)",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT ''",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('ObjectPropsToArray').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "TestTbl2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"objPropsToArr_output": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/forecastsolar dataflow')]",
				"[concat(variables('factoryId'), '/linkedServices/AzFuncJsonStructObjToArray')]",
				"[concat(variables('factoryId'), '/datasets/RestResourceForecastSolar')]",
				"[concat(variables('factoryId'), '/datasets/TestTbl2')]",
				"[concat(variables('factoryId'), '/datasets/ForecastSolarJson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObjectPropsToArray",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "WebForecastSolar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ObjectPropsToArray?jpath=result.watts,result.watt_hours,result.watt_hours_day&keyToProp=datetime&valToProp=watt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('WebForecastSolar').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzFuncJsonStructObjToArray",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebForecastSolar",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.forecast.solar/estimate/54.911280/9.764450/22/0/6.7?no_sun=1",
							"method": "GET",
							"headers": {},
							"datasets": [
								{
									"referenceName": "RestResourceForecastSolar",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ObjectPropsToArray",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "JsonText",
										"value": {
											"value": "@string(activity('ObjectPropsToArray').output)",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT ''",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('ObjectPropsToArray').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "TestTbl2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"objPropsToArr_output": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzFuncJsonStructObjToArray')]",
				"[concat(variables('factoryId'), '/datasets/RestResourceForecastSolar')]",
				"[concat(variables('factoryId'), '/datasets/TestTbl2')]",
				"[concat(variables('factoryId'), '/datasets/ForecastSolarJson')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSolarJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BattChargePlanBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "forecastsolar.json",
						"folderPath": "forecastsolar",
						"container": "adf"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BattChargePlanBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSolarTxt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BattChargePlanBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "forecastsolar.json",
						"folderPath": "forecastsolar",
						"container": "adf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BattChargePlanBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecasySolarJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BattChargePlanBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "forecastsolar.json",
						"folderPath": "forecastsolar",
						"container": "adf"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BattChargePlanBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResourceBatteryStat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceSonnenBattery",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceSonnenBattery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResourceElSpotPrices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ElSpotPrices",
					"type": "LinkedServiceReference",
					"parameters": {
						"todayStr": {
							"value": "@utcNow('yyyy-MM-dd')",
							"type": "Expression"
						},
						"tormorrowStr": {
							"value": "@getFutureTime(1,'Day','yyyy-MM-dd')",
							"type": "Expression"
						}
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(\n'https://api.energidataservice.dk/datastore_search_sql',\n'?sql=SELECT%20*%20from%20%22elspotprices%22%20WHERE%20%22PriceArea%22=''DK1''%20AND%20%22HourUTC%22%3e=''',\nutcNow('yyyy-MM-dd'),\n'''%20AND%20%22HourUTC%22%3c''',\ngetFutureTime(1, 'Day', 'yyyy-MM-dd'),\n'''%20ORDER%20BY%20%22HourUTC%22%20ASC%20LIMIT%2050')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ElSpotPrices')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResourceForecastSolar')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ForecastSolar",
					"type": "LinkedServiceReference",
					"parameters": {
						"no_sun": "1"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ForecastSolar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TblElSpotPrices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlDbBattChargePlan",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "elspotprices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlDbBattChargePlan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestTbl1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlDbBattChargePlan",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "date_1",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "watts",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watt_hours",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestTbl2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlDbBattChargePlan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestTbl2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlDbBattChargePlan",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "date_1",
						"type": "varchar"
					},
					{
						"name": "watts",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watt_hours",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestTbl2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlDbBattChargePlan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/chargePlanTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlDbBattChargePlan",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "date",
						"type": "date"
					},
					{
						"name": "hour",
						"type": "int",
						"precision": 10
					},
					{
						"name": "est_consumption",
						"type": "int",
						"precision": 10
					},
					{
						"name": "est_production",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surplus_production",
						"type": "int",
						"precision": 10
					},
					{
						"name": "charge_potential",
						"type": "int",
						"precision": 10
					},
					{
						"name": "charge_trigger",
						"type": "bit"
					},
					{
						"name": "charging",
						"type": "bit"
					},
					{
						"name": "accumulated_charge",
						"type": "float",
						"precision": 15
					},
					{
						"name": "elspotprice_dkk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "surplus_sellable_production",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sale_potential_dkk",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "chargeplan"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlDbBattChargePlan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/forecastedWattsBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BattChargePlanBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "adf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BattChargePlanBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV_BattChargePlan')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_BattChargePlan_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzFuncJsonStructObjToArray')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzFuncJsonStructObjToArray_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzFuncJsonStructObjToArray_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BattChargePlanBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BattChargePlanBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ElSpotPrices')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"todayStr": {
						"type": "String",
						"defaultValue": "2022-05-27"
					},
					"tormorrowStr": {
						"type": "String",
						"defaultValue": "2022-05-28"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ElSpotPrices_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSolar')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Solar Forecast REST Webservice",
				"parameters": {
					"no_sun": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ForecastSolar_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceSonnenBattery')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceSonnenBattery_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService_jsonStructObjToArray')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService_jsonStructObjToArray_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlDbBattChargePlan')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SqlDbBattChargePlan_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "forecast-solar-loaddata",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-31T00:54:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/forecast-solar-loaddata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_elspotprices')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "elspotprices-loaddata",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-31T00:20:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								25
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/elspotprices-loaddata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/batterystat dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResourceBatteryStat",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "chargePlanTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flattenConsumedEnergy"
						},
						{
							"name": "AddAsHourBasedOnRowNumber"
						},
						{
							"name": "AddConstantColumn"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AddIdCol"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (data as (attributes as (battery_charged_energy as short[], battery_discharged_energy as short[], consumed_energy as short[], direct_usage_energy as short[], end as string, grid_feedin_energy as short[], grid_purchase_energy as short[], measurement_method as string, produced_energy as short[], resolution as string, start as string), id as integer, type as string)),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 derive(est_consumption = body.data.attributes.consumed_energy,",
						"          date = addDays(toDate(body.data.attributes.start,'yyyy-MM-dd'),7)) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(body.data.attributes.consumed_energy),",
						"     mapColumn(",
						"          est_consumption = body.data.attributes.consumed_energy,",
						"          date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenConsumedEnergy",
						"AddConstantColumn window(over(constant),",
						"     asc(constant, true),",
						"     hour = rowNumber()-1) ~> AddAsHourBasedOnRowNumber",
						"flattenConsumedEnergy derive(constant = 1) ~> AddConstantColumn",
						"AddIdCol alterRow(upsertIf(true())) ~> AlterRow1",
						"AddAsHourBasedOnRowNumber derive(id = concat(\r",
						"    replace(toString(date), '-', ''),\r",
						"    '_',\r",
						"    toString(hour)\r",
						")) ~> AddIdCol",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          date as date,",
						"          hour as integer,",
						"          est_consumption as integer,",
						"          est_production as integer,",
						"          surplus_production as integer,",
						"          charge_potential as integer,",
						"          charge_trigger as boolean,",
						"          charging as boolean,",
						"          accumulated_charge as double,",
						"          elspotprice_dkk as double,",
						"          surplus_sellable_production as integer,",
						"          sale_potential_dkk as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          date,",
						"          hour,",
						"          est_consumption",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResourceBatteryStat')]",
				"[concat(variables('factoryId'), '/datasets/chargePlanTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "forecastedWattsBlob",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestTbl1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "select1"
						},
						{
							"name": "flatten2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          wattStr as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(datetime = split(regexReplace(wattStr, \":[0-9]*,\", \",\"),\",\"),",
						"          watt = split(regexReplace(replace(replace(replace(replace(replace(replace(wattStr, \":00:00\", \"\"),\"\\{\",\"\"),\"}\",\"\"),\"-\",\"\"),\" \",\"\"),\"\\\"\",\"\"),\"[0-9]*:\",\"\"),\",\")) ~> derivedColumn1",
						"select1 foldDown(unroll(datetime),",
						"     mapColumn(",
						"          datetimeCol = datetime,",
						"          wattCol = watt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"derivedColumn1 select(mapColumn(",
						"          datetime,",
						"          watt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flatten1 foldDown(unroll(wattCol),",
						"     mapColumn(",
						"          watt = wattCol,",
						"          datetime = datetimeCol",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          date_1 as timestamp,",
						"          watts as integer,",
						"          watt_hours as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          watts = watt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/forecastedWattsBlob')]",
				"[concat(variables('factoryId'), '/datasets/TestTbl1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestTbl2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "parse1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JsonText as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     backslashEscape: true) ~> source1",
						"parse1 foldDown(unroll(JsonText.result.watts),",
						"     mapColumn(",
						"          datetime = JsonText.result.watts.datetime,",
						"          watt = JsonText.result.watts.watt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"source1 parse(JsonText = JsonText ? (result as (\r",
						"     watts as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[],\r",
						"     watt_hours as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[],\r",
						"     watt_hours_day as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[]\r",
						"     ),\r",
						"\r",
						"     message as (\r",
						"          code as integer,\r",
						"          type as string,\r",
						"          text as string,\r",
						"          info as (\r",
						"               latitude as integer,\r",
						"               longitude as integer,\r",
						"               place as string,\r",
						"               timezone as string\r",
						"               ),\r",
						"          ratelimit as (\r",
						"               period as integer,\r",
						"               limit as integer,\r",
						"               remaining as integer\r",
						"               )\r",
						"          )\r",
						"     )[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parse1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          date_1 as string,",
						"          watts as integer,",
						"          watt_hours as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date_1 = datetime,",
						"          watts = watt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ForecastSolarJson')]",
				"[concat(variables('factoryId'), '/datasets/TestTbl2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/elspotprices dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResourceElSpotPrices",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "chargePlanTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (help as string, result as (fields as (id as string, type as string)[], records as (HourDK as string, HourUTC as string, PriceArea as string, SpotPriceDKK as double, SpotPriceEUR as double, {_full_text} as string, {_id} as integer)[], sql as string), success as boolean),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"source1 select(mapColumn(",
						"          records = body.result.records",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 foldDown(unroll(records),",
						"     mapColumn(",
						"          HourDK = records.HourDK,",
						"          HourUTC = records.HourUTC,",
						"          SpotPriceDKK = records.SpotPriceDKK,",
						"          SpotPriceEUR = records.SpotPriceEUR",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(date = toDate(HourDK,'yyyy-MM-dd'),",
						"          hour = hour(toTimestamp(replace(HourDK,'T',' '))),",
						"          id = concat(\r",
						"    replace(toString(toDate(HourDK,'yyyy-MM-dd')),'-',''),\r",
						"    '_',\r",
						"    toString(hour(toTimestamp(replace(HourDK,'T',' '))))\r",
						"    )) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          date as date,",
						"          hour as integer,",
						"          est_consumption as integer,",
						"          est_production as integer,",
						"          surplus_production as integer,",
						"          charge_potential as integer,",
						"          charge_trigger as boolean,",
						"          charging as boolean,",
						"          accumulated_charge as double,",
						"          elspotprice_dkk as double,",
						"          surplus_sellable_production as integer,",
						"          sale_potential_dkk as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          date,",
						"          hour,",
						"          elspotprice_dkk = SpotPriceDKK",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResourceElSpotPrices')]",
				"[concat(variables('factoryId'), '/datasets/chargePlanTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/forecastsolar dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "chargePlanTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "addDbColumns"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JsonText as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     backslashEscape: true) ~> source1",
						"source1 parse(JsonText = JsonText ? (result as (\r",
						"     watts as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[],\r",
						"     watt_hours as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[],\r",
						"     watt_hours_day as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[]\r",
						"     ),\r",
						"\r",
						"     message as (\r",
						"          code as integer,\r",
						"          type as string,\r",
						"          text as string,\r",
						"          info as (\r",
						"               latitude as integer,\r",
						"               longitude as integer,\r",
						"               place as string,\r",
						"               timezone as string\r",
						"               ),\r",
						"          ratelimit as (\r",
						"               period as integer,\r",
						"               limit as integer,\r",
						"               remaining as integer\r",
						"               )\r",
						"          )\r",
						"     )[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parse1",
						"parse1 foldDown(unroll(JsonText.result.watts),",
						"     mapColumn(",
						"          datetime = JsonText.result.watts.datetime,",
						"          watt = JsonText.result.watts.watt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(id = concat(replace(toString(toDate(datetime, \"yyyy-MM-dd\")),\"-\",\"\"), \"_\", toString(hour(toTimestamp(datetime)))),",
						"          date = toDate(datetime, \"yyyy-MM-dd\"),",
						"          hour = hour(toTimestamp(datetime))) ~> addDbColumns",
						"addDbColumns alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          date as date,",
						"          hour as integer,",
						"          est_consumption as integer,",
						"          est_production as integer,",
						"          surplus_production as integer,",
						"          charge_potential as integer,",
						"          charge_trigger as boolean,",
						"          charging as boolean,",
						"          accumulated_charge as double,",
						"          elspotprice_dkk as double,",
						"          surplus_sellable_production as integer,",
						"          sale_potential_dkk as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          date,",
						"          hour,",
						"          est_production = watt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ForecastSolarJson')]",
				"[concat(variables('factoryId'), '/datasets/chargePlanTable')]"
			]
		}
	]
}