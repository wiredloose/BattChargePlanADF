{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFforBattChargePlan"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/forecastsolar dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "chargePlanTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "addDbColumns"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JsonText as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     backslashEscape: true) ~> source1",
						"source1 parse(JsonText = JsonText ? (result as (\r",
						"     watts as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[],\r",
						"     watt_hours as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[],\r",
						"     watt_hours_day as (\r",
						"          datetime as string,\r",
						"          watt as integer\r",
						"          )[]\r",
						"     ),\r",
						"\r",
						"     message as (\r",
						"          code as integer,\r",
						"          type as string,\r",
						"          text as string,\r",
						"          info as (\r",
						"               latitude as integer,\r",
						"               longitude as integer,\r",
						"               place as string,\r",
						"               timezone as string\r",
						"               ),\r",
						"          ratelimit as (\r",
						"               period as integer,\r",
						"               limit as integer,\r",
						"               remaining as integer\r",
						"               )\r",
						"          )\r",
						"     )[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parse1",
						"parse1 foldDown(unroll(JsonText.result.watts),",
						"     mapColumn(",
						"          datetime = JsonText.result.watts.datetime,",
						"          watt = JsonText.result.watts.watt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(id = concat(replace(toString(toDate(datetime, \"yyyy-MM-dd\")),\"-\",\"\"), \"_\", toString(hour(toTimestamp(datetime)))),",
						"          date = toDate(datetime, \"yyyy-MM-dd\"),",
						"          hour = hour(toTimestamp(datetime))) ~> addDbColumns",
						"addDbColumns alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          date as date,",
						"          hour as integer,",
						"          est_consumption as integer,",
						"          est_production as integer,",
						"          surplus_production as integer,",
						"          charge_potential as integer,",
						"          charge_trigger as boolean,",
						"          charging as boolean,",
						"          accumulated_charge as double,",
						"          elspotprice_dkk as double,",
						"          surplus_sellable_production as integer,",
						"          sale_potential_dkk as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          date,",
						"          hour,",
						"          est_production = watt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/elspotprices-loaddata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "elspotprices dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "elspotprices dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/forecast-solar-loaddata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "forecastsolar dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Store JSON output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "forecastsolar dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ObjectPropsToArray",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "WebForecastSolar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ObjectPropsToArray?jpath=result.watts,result.watt_hours,result.watt_hours_day&keyToProp=datetime&valToProp=watt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('WebForecastSolar').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzFuncJsonStructObjToArray",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebForecastSolar",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.forecast.solar/estimate/54.911280/9.764450/22/0/6.7?no_sun=1",
							"method": "GET",
							"headers": {},
							"datasets": [
								{
									"referenceName": "RestResourceForecastSolar",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Store JSON output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ObjectPropsToArray",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "JsonText",
										"value": {
											"value": "@string(activity('ObjectPropsToArray').output)",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT ''",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('ObjectPropsToArray').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "TestTbl2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"objPropsToArr_output": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/forecastsolar dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObjectPropsToArray",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "WebForecastSolar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ObjectPropsToArray?jpath=result.watts,result.watt_hours,result.watt_hours_day&keyToProp=datetime&valToProp=watt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('WebForecastSolar').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzFuncJsonStructObjToArray",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebForecastSolar",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.forecast.solar/estimate/54.911280/9.764450/22/0/6.7?no_sun=1",
							"method": "GET",
							"headers": {},
							"datasets": [
								{
									"referenceName": "RestResourceForecastSolar",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ObjectPropsToArray",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "JsonText",
										"value": {
											"value": "@string(activity('ObjectPropsToArray').output)",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT ''",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('ObjectPropsToArray').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "TestTbl2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ForecastSolarJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"objPropsToArr_output": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "forecast-solar-loaddata",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-31T00:54:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/forecast-solar-loaddata')]"
			]
		}
	]
}