{
	"name": "forecastsolar dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ForecastSolarJson",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TestTbl2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     func_output as string (\"\\{result:\\{watts:[]}}\")",
				"}",
				"source(output(",
				"          JsonText as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     backslashEscape: true) ~> source1",
				"source1 parse(JsonText = JsonText ? (result as (\r",
				"     watts as (\r",
				"          datetime as string,\r",
				"          watt as integer\r",
				"          )[],\r",
				"     watt_hours as (\r",
				"          datetime as string,\r",
				"          watt as integer\r",
				"          )[],\r",
				"     watt_hours_day as (\r",
				"          datetime as string,\r",
				"          watt as integer\r",
				"          )[]\r",
				"     ),\r",
				"\r",
				"     message as (\r",
				"          code as integer,\r",
				"          type as string,\r",
				"          text as string,\r",
				"          info as (\r",
				"               latitude as integer,\r",
				"               longitude as integer,\r",
				"               place as string,\r",
				"               timezone as string\r",
				"               ),\r",
				"          ratelimit as (\r",
				"               period as integer,\r",
				"               limit as integer,\r",
				"               remaining as integer\r",
				"               )\r",
				"          )\r",
				"     )[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 foldDown(unroll(JsonText.result.watts),",
				"     mapColumn(",
				"          datetime = JsonText.result.watts.datetime,",
				"          watt = JsonText.result.watts.watt",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          date_1 as string,",
				"          watts as integer,",
				"          watt_hours as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          date_1 = datetime,",
				"          watts = watt",
				"     )) ~> sink1"
			]
		}
	}
}