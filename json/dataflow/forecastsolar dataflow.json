{
	"name": "forecastsolar dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ForecastSolarJson",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "chargePlanTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "addDbColumns"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          JsonText as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     backslashEscape: true) ~> source1",
				"source1 parse(JsonText = JsonText ? (result as (\r",
				"     watts as (\r",
				"          datetime as string,\r",
				"          watt as integer\r",
				"          )[],\r",
				"     watt_hours as (\r",
				"          datetime as string,\r",
				"          watt as integer\r",
				"          )[],\r",
				"     watt_hours_day as (\r",
				"          datetime as string,\r",
				"          watt as integer\r",
				"          )[]\r",
				"     ),\r",
				"\r",
				"     message as (\r",
				"          code as integer,\r",
				"          type as string,\r",
				"          text as string,\r",
				"          info as (\r",
				"               latitude as integer,\r",
				"               longitude as integer,\r",
				"               place as string,\r",
				"               timezone as string\r",
				"               ),\r",
				"          ratelimit as (\r",
				"               period as integer,\r",
				"               limit as integer,\r",
				"               remaining as integer\r",
				"               )\r",
				"          )\r",
				"     )[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 foldDown(unroll(JsonText.result.watts),",
				"     mapColumn(",
				"          datetime = JsonText.result.watts.datetime,",
				"          watt = JsonText.result.watts.watt",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(id = concat(replace(toString(toDate(datetime, \"yyyy-MM-dd\")),\"-\",\"\"), \"_\", toString(hour(toTimestamp(datetime)))),",
				"          date = toDate(datetime, \"yyyy-MM-dd\"),",
				"          hour = hour(toTimestamp(datetime))) ~> addDbColumns",
				"addDbColumns alterRow(upsertIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          date as date,",
				"          hour as integer,",
				"          est_consumption as integer,",
				"          est_production as integer,",
				"          surplus_production as integer,",
				"          charge_potential as double,",
				"          charge_trigger as boolean,",
				"          charging as boolean,",
				"          accumulated_charge as double,",
				"          elspotprice_dkk as double,",
				"          surplus_sellable_production as integer,",
				"          sale_potential_dkk as double,",
				"          elspotprice_eur as double,",
				"          sale_potential_eur as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id,",
				"          date,",
				"          hour,",
				"          est_production = watt",
				"     )) ~> sink1"
			]
		}
	}
}