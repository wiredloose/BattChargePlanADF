{
	"name": "forecastsolar dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RestResourceForecastSolar",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TestTbl2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "parse1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "externalCall1",
					"linkedService": {
						"referenceName": "RestService_jsonStructObjToArray",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "CreateURL"
				}
			],
			"scriptLines": [
				"parameters{",
				"     func_output as string",
				"}",
				"source(output(",
				"          body as (message as (code as boolean, info as (latitude as double, longitude as double, place as string, timezone as string), ratelimit as (limit as short, period as short, remaining as short), text as string, type as string), result as (watt_hours as ({2022-05-31 05:00:00} as short, {2022-05-31 06:00:00} as short, {2022-05-31 07:00:00} as short, {2022-05-31 08:00:00} as short, {2022-05-31 09:00:00} as short, {2022-05-31 10:00:00} as short, {2022-05-31 11:00:00} as short, {2022-05-31 12:00:00} as short, {2022-05-31 13:00:00} as short, {2022-05-31 14:00:00} as short, {2022-05-31 15:00:00} as short, {2022-05-31 16:00:00} as short, {2022-05-31 17:00:00} as short, {2022-05-31 18:00:00} as short, {2022-05-31 19:00:00} as short, {2022-05-31 20:00:00} as short, {2022-05-31 21:00:00} as short, {2022-06-01 05:00:00} as short, {2022-06-01 06:00:00} as short, {2022-06-01 07:00:00} as short, {2022-06-01 08:00:00} as short, {2022-06-01 09:00:00} as short, {2022-06-01 10:00:00} as short, {2022-06-01 11:00:00} as short, {2022-06-01 12:00:00} as short, {2022-06-01 13:00:00} as short, {2022-06-01 14:00:00} as short, {2022-06-01 15:00:00} as short, {2022-06-01 16:00:00} as short, {2022-06-01 17:00:00} as short, {2022-06-01 18:00:00} as short, {2022-06-01 19:00:00} as short, {2022-06-01 20:00:00} as short, {2022-06-01 21:00:00} as short), watt_hours_day as ({2022-05-31} as short, {2022-06-01} as short), watts as ({2022-05-31 05:00:00} as short, {2022-05-31 06:00:00} as short, {2022-05-31 07:00:00} as short, {2022-05-31 08:00:00} as short, {2022-05-31 09:00:00} as short, {2022-05-31 10:00:00} as short, {2022-05-31 11:00:00} as short, {2022-05-31 12:00:00} as short, {2022-05-31 13:00:00} as short, {2022-05-31 14:00:00} as short, {2022-05-31 15:00:00} as short, {2022-05-31 16:00:00} as short, {2022-05-31 17:00:00} as short, {2022-05-31 18:00:00} as short, {2022-05-31 19:00:00} as short, {2022-05-31 20:00:00} as short, {2022-05-31 21:00:00} as short, {2022-06-01 05:00:00} as short, {2022-06-01 06:00:00} as short, {2022-06-01 07:00:00} as short, {2022-06-01 08:00:00} as short, {2022-06-01 09:00:00} as short, {2022-06-01 10:00:00} as short, {2022-06-01 11:00:00} as short, {2022-06-01 12:00:00} as short, {2022-06-01 13:00:00} as short, {2022-06-01 14:00:00} as short, {2022-06-01 15:00:00} as short, {2022-06-01 16:00:00} as short, {2022-06-01 17:00:00} as short, {2022-06-01 18:00:00} as short, {2022-06-01 19:00:00} as short, {2022-06-01 20:00:00} as short, {2022-06-01 21:00:00} as short))),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
				"externalCall1 select(mapColumn(",
				"          body = source1@body,",
				"          headers,",
				"          ParamStr",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 parse(wattsJson = $func_output ? (result as (watts as (datetime as string,",
				"     watt as integer)[]),",
				"     message as (code as integer,",
				"     type as string,",
				"     text as string,",
				"     info as (latitude as integer,",
				"     longitude as integer,",
				"     place as string,",
				"     timezone as string),",
				"     ratelimit as (period as integer,",
				"     limit as integer,",
				"     remaining as integer)))[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 foldDown(unroll(wattsJson.result.watts),",
				"     mapColumn(",
				"          datetime = wattsJson.result.watts.datetime,",
				"          watt = wattsJson.result.watts.watt",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"CreateURL call(mapColumn(",
				"          ParamStr",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     output(",
				"          body as (result as (watts as (datetime as string, watt as integer)[], watt_hours as (datetime as string, watt as integer)[], watt_hours_day as (datetime as string, watt as integer)[], message as (code as integer, type as string, text as string, info as (latitude as integer, longitude as integer, place as string, timezone as string), ratelimit as (period as integer, limit as integer, remaining as integer))))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     format: 'rest',",
				"     store: 'restservice',",
				"     timeout: 30,",
				"     httpMethod: 'GET',",
				"     rowRelativeUrl: 'ParamStr',",
				"     bodyColumnName: 'body',",
				"     requestFormat: ['type' -> 'json'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> externalCall1",
				"source1 derive(ParamStr = '?jpath=result.watts,result.watt_hours,result.watt_hours_day&keyToProp=datetime&valToProp=watt&json={\"result\":' + toString(body.result)+'}') ~> CreateURL",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          date_1 as string,",
				"          watts as integer,",
				"          watt_hours as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          date_1 = datetime,",
				"          watts = watt",
				"     )) ~> sink1"
			]
		}
	}
}