{
	"name": "batterystat dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RestResourceBatteryStat",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "chargePlanTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flattenConsumedEnergy"
				},
				{
					"name": "AddAsHourBasedOnRowNumber"
				},
				{
					"name": "AddConstantColumn"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AddIdCol"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (data as (attributes as (battery_charged_energy as short[], battery_discharged_energy as short[], consumed_energy as short[], direct_usage_energy as short[], end as string, grid_feedin_energy as short[], grid_purchase_energy as short[], measurement_method as string, produced_energy as short[], resolution as string, start as string), id as integer, type as string)),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
				"source1 derive(est_consumption = body.data.attributes.consumed_energy,",
				"          date = addDays(toDate(body.data.attributes.start,'yyyy-MM-dd'),7)) ~> derivedColumn1",
				"derivedColumn1 foldDown(unroll(body.data.attributes.consumed_energy),",
				"     mapColumn(",
				"          est_consumption = body.data.attributes.consumed_energy,",
				"          date",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenConsumedEnergy",
				"AddConstantColumn window(over(constant),",
				"     asc(constant, true),",
				"     hour = rowNumber()-1) ~> AddAsHourBasedOnRowNumber",
				"flattenConsumedEnergy derive(constant = 1) ~> AddConstantColumn",
				"AddIdCol alterRow(upsertIf(true())) ~> AlterRow1",
				"AddAsHourBasedOnRowNumber derive(id = concat(\r",
				"    replace(toString(date), '-', ''),\r",
				"    '_',\r",
				"    toString(hour)\r",
				")) ~> AddIdCol",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          date as date,",
				"          hour as integer,",
				"          est_consumption as integer,",
				"          est_production as integer,",
				"          surplus_production as integer,",
				"          charge_potential as double,",
				"          charge_trigger as boolean,",
				"          charging as boolean,",
				"          accumulated_charge as double,",
				"          elspotprice_dkk as double,",
				"          surplus_sellable_production as integer,",
				"          sale_potential_dkk as double,",
				"          elspotprice_eur as double,",
				"          sale_potential_eur as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id,",
				"          date,",
				"          hour,",
				"          est_consumption",
				"     )) ~> sink1"
			]
		}
	}
}