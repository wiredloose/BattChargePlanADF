{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RestResourceForecastSolar",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "stringify1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (message as (code as boolean, info as (latitude as double, longitude as double, place as string, timezone as string), ratelimit as (limit as short, period as short, remaining as short), text as string, type as string), result as (watt_hours as ({2022-05-23 05:00:00} as boolean, {2022-05-23 06:00:00} as short, {2022-05-23 07:00:00} as short, {2022-05-23 08:00:00} as short, {2022-05-23 09:00:00} as short, {2022-05-23 10:00:00} as short, {2022-05-23 11:00:00} as short, {2022-05-23 12:00:00} as short, {2022-05-23 13:00:00} as short, {2022-05-23 14:00:00} as short, {2022-05-23 15:00:00} as short, {2022-05-23 16:00:00} as integer, {2022-05-23 17:00:00} as integer, {2022-05-23 18:00:00} as integer, {2022-05-23 19:00:00} as integer, {2022-05-23 20:00:00} as integer, {2022-05-23 21:00:00} as integer, {2022-05-24 05:00:00} as boolean, {2022-05-24 06:00:00} as short, {2022-05-24 07:00:00} as short, {2022-05-24 08:00:00} as short, {2022-05-24 09:00:00} as short, {2022-05-24 10:00:00} as short, {2022-05-24 11:00:00} as short, {2022-05-24 12:00:00} as short, {2022-05-24 13:00:00} as short, {2022-05-24 14:00:00} as short, {2022-05-24 15:00:00} as short, {2022-05-24 16:00:00} as short, {2022-05-24 17:00:00} as short, {2022-05-24 18:00:00} as short, {2022-05-24 19:00:00} as short, {2022-05-24 20:00:00} as short, {2022-05-24 21:00:00} as short), watt_hours_day as ({2022-05-23} as integer, {2022-05-24} as short), watts as ({2022-05-23 05:00:00} as short, {2022-05-23 06:00:00} as short, {2022-05-23 07:00:00} as short, {2022-05-23 08:00:00} as short, {2022-05-23 09:00:00} as short, {2022-05-23 10:00:00} as short, {2022-05-23 11:00:00} as short, {2022-05-23 12:00:00} as short, {2022-05-23 13:00:00} as short, {2022-05-23 14:00:00} as short, {2022-05-23 15:00:00} as short, {2022-05-23 16:00:00} as short, {2022-05-23 17:00:00} as short, {2022-05-23 18:00:00} as short, {2022-05-23 19:00:00} as short, {2022-05-23 20:00:00} as short, {2022-05-23 21:00:00} as short, {2022-05-24 05:00:00} as short, {2022-05-24 06:00:00} as short, {2022-05-24 07:00:00} as short, {2022-05-24 08:00:00} as short, {2022-05-24 09:00:00} as short, {2022-05-24 10:00:00} as short, {2022-05-24 11:00:00} as short, {2022-05-24 12:00:00} as short, {2022-05-24 13:00:00} as short, {2022-05-24 14:00:00} as short, {2022-05-24 15:00:00} as short, {2022-05-24 16:00:00} as short, {2022-05-24 17:00:00} as short, {2022-05-24 18:00:00} as short, {2022-05-24 19:00:00} as short, {2022-05-24 20:00:00} as short, {2022-05-24 21:00:00} as short))),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
				"stringify1 derive() ~> derivedColumn1",
				"source1 select(mapColumn(",
				"          watt_hours = body.result.watt_hours,",
				"          watts = body.result.watts",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 stringify(wattsStr = watts ? string,",
				"          watt_hoursStr = watt_hours ? string,",
				"     format: 'json') ~> stringify1"
			]
		}
	}
}