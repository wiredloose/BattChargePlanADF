{
	"name": "querychargeplan",
	"properties": {
		"activities": [
			{
				"name": "If Battery already charging",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.batterychargingflag,1)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set status check-valid-chargeplan",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "varPipelineStatus",
								"value": "running: checking charge plan exists and valid"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set status batt-already-charging",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "varPipelineStatus",
								"value": "stopped: battery already charging"
							}
						}
					]
				}
			},
			{
				"name": "If ChargePlan not exists or not valid",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Lookup chargeplan not exists or not valid",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(activity('Lookup chargeplan not exists or not valid').output, 'count')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set status check-should-charging-begin",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "varPipelineStatus",
								"value": "running: check should charging begin"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set status generate-charge-plan",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "varPipelineStatus",
								"value": "running: generate charge plan"
							}
						},
						{
							"name": "Execute Pipeline generateChargePlan",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Set status generate-charge-plan",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "generateChargePlan",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					]
				}
			},
			{
				"name": "If Should Charging Begin",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Lookup should charging begin",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('Lookup should charging begin').output.value, 'True')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set pipeline ends no-command-given",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "varPipelineStatus",
								"value": "stopped: no command given - battery NOT set for charging"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set status begin-charging",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "varPipelineStatus",
								"value": "running: begin charging command given"
							}
						}
					]
				}
			},
			{
				"name": "Lookup should charging begin",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "If ChargePlan not exists or not valid",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT [id]\n      ,[date]\n      ,[hour]\n      ,[charge_trigger]\n      ,[charging]\n      ,[elspotprice_dkk]\n      ,[elspotprice_eur]\n  FROM [dbo].[chargeplan] \n  WHERE[date] = CONVERT (date, GETDATE()) AND [hour] = DATEPART(hour, GETDATE())+2\n  ORDER BY [hour] ASC",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "chargePlanTable",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Lookup chargeplan not exists or not valid",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "If Battery already charging",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT [id]\n      ,[date]\n      ,[hour]\n      ,[charge_trigger]\n      ,[charging]\n      ,[elspotprice_dkk]\n      ,[elspotprice_eur]\n  FROM [dbo].[chargeplan] \n  WHERE[date] = CONVERT (date, GETDATE()) AND [charge_trigger] = 1\n  ORDER BY [hour] ASC",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "chargePlanTable",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"batterychargingflag": {
				"type": "int",
				"defaultValue": 0
			}
		},
		"variables": {
			"varChargePlanJson": {
				"type": "String"
			},
			"varPipelineStatus": {
				"type": "String",
				"defaultValue": "running"
			}
		},
		"annotations": []
	}
}